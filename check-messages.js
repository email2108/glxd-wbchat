const https = require('https');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const botToken = '7856893063:AAFhYTUkhnxuhY18tA9AnOFvmQiiu2Jx6DY';

// H√†m ƒë·ªÉ l·∫•y c√°c tin nh·∫Øn ƒëang ch·ªù
async function getPendingMessages() {
  return new Promise((resolve, reject) => {
    const url = `https://api.telegram.org/bot${botToken}/getUpdates`;
    
    https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
    }).on('error', reject);
  });
}

// H√†m ƒë·ªÉ g·ª≠i tin nh·∫Øn
async function sendMessage(chatId, text) {
  return new Promise((resolve, reject) => {
    const url = `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${chatId}&text=${encodeURIComponent(text)}&parse_mode=Markdown`;
    
    https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
    }).on('error', reject);
  });
}

// H√†m ƒë·ªÉ t·∫°o OTP
function generateOTP() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn
async function processMessages() {
  try {
    console.log('ƒêang ki·ªÉm tra tin nh·∫Øn ƒëang ch·ªù...');
    
    const updates = await getPendingMessages();
    console.log('Ph·∫£n h·ªìi t·ª´ Telegram:', JSON.stringify(updates, null, 2));
    
    if (updates.ok && updates.result && updates.result.length > 0) {
      console.log(`T√¨m th·∫•y ${updates.result.length} tin nh·∫Øn ƒëang ch·ªù`);
      
      for (const update of updates.result) {
        if (update.message && update.message.chat && update.message.text) {
          const chatId = update.message.chat.id;
          const text = update.message.text;
          
          console.log(`X·ª≠ l√Ω tin nh·∫Øn t·ª´ ${chatId}: "${text}"`);
          
          // T·∫°o user n·∫øu ch∆∞a t·ªìn t·∫°i
          let user = await prisma.user.findFirst({
            where: { telegramChatId: chatId.toString() }
          });
          
          if (!user) {
            user = await prisma.user.create({
              data: {
                telegramChatId: chatId.toString(),
                name: `User_${chatId}`,
              }
            });
            console.log(`ƒê√£ t·∫°o user m·ªõi: ${user.id}`);
          }
          
          // T·∫°o v√† g·ª≠i OTP
          const otp = generateOTP();
          const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 ph√∫t
          
          // L∆∞u OTP v√†o database
          await prisma.oTP.create({
            data: {
              code: otp,
              type: 'TELEGRAM',
              sentTo: chatId.toString(),
              userId: user.id,
              expiresAt,
            }
          });
          
          // G·ª≠i OTP cho user
          const message = `üëã Xin ch√†o ${telegramUser.first_name || 'b·∫°n'}!\n\nüîê *M√£ GLXD OTP c·ªßa b·∫°n*: ${otp}\n\n‚è∞ M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t\n\nüõ°Ô∏è Bot ch·ªâ ph·∫£n h·ªìi khi b·∫°n nh·∫Øn tin, kh√¥ng t·ª± g·ª≠i cho b·∫•t k·ª≥ ai.\n\nüåê Vui l√≤ng nh·∫≠p m√£ n√†y t·∫°i: http://localhost:3000`;
          
          const sendResult = await sendMessage(chatId, message);
          console.log('K·∫øt qu·∫£ g·ª≠i tin nh·∫Øn:', sendResult);
          
          console.log(`ƒê√£ g·ª≠i OTP ${otp} ƒë·∫øn ${chatId}`);
        }
      }
    } else {
      console.log('Kh√¥ng c√≥ tin nh·∫Øn ƒëang ch·ªù');
    }
    
  } catch (error) {
    console.error('L·ªói khi x·ª≠ l√Ω tin nh·∫Øn:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y h√†m x·ª≠ l√Ω
processMessages();